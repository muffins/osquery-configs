{
    "platform": "windows",
    "queries": {
        "chocolatey_packages": {
            "query": "select name, version, summary, author, license, path from chocolatey_packages;",
            "interval": 3600,
            "version": "2.8.0"
        },
        "chrome_extensions": {
            "query": "select u.username, ce.uid, ce.name, ce.identifier, ce.version, ce.path, ce.description from users u join chrome_extensions ce using (uid);",
            "interval": 600
        },
        "arp_cache": {
            "query": "select address, mac, interface, permanent from arp_cache;",
            "interval": 600
        },
        "startup_items": {
            "query": "select os.platform, s.name, s.path as filename, s.type, s.source, s.args, s.username, h.md5, h.sha1, h.sha256 from os_version os, startup_items s left join hash h on s.path = h.path;",
            "interval": 3600,
            "snapshot": false
        },
        "etc_hosts": {
            "query": "select address, hostnames from etc_hosts;",
            "interval": 600
        },
        "interface_addresses": {
            "query": "select ia.interface, ia.address, ia.friendly_name, ia.type, id.mac, id.mtu, id.service, id.connection_status from interface_addresses ia join interface_details id using (interface) where lower(ia.friendly_name) not like '%loopback%';",
            "interval": 3600
        },
        "logged_in_users": {
            "query": "select liu.*, p.name, p.cmdline, p.cwd, p.root from logged_in_users liu, processes p where liu.pid = p.pid;",
            "snapshot": true,
            "interval": 300
        },
        "listening_processes": {
            "query": "select p.pid, lp.port, lp.address, p.name, p.path, p.cmdline, p.cwd, p.uid, p.gid, p.parent from listening_ports lp join processes p using (pid) where lp.address <> '';",
            "interval": 300,
            "removed": false
        },
        "interface_statistics": {
            "query": "select ia.address, ia.friendly_name, ia.type, id.mac, id.ipackets, id.opackets, id.ibytes, id.obytes, id.ierrors, id.oerrors, id.idrops, id.odrops, id.collisions, id.service from interface_addresses ia join interface_details id using (interface) where lower(ia.friendly_name) not like '%loopback%' and ipackets <> '' and opackets <> '';",
            "interval": 300
        },
        "kernel_info": {
            "query": "select version, path, arguments, device from kernel_info;",
            "snapshot": true,
            "interval": 3600
        },
        "top_cpu_processes": {
            "query": "select p.pid, p.uid, p.name, p.path, p.nice, p.threads, p.resident_size, (user_time + system_time) / ((unix_time - (start_time + time_diff))) as cpu_per_second from processes p, time, (select oi.start_time - p.start_time as time_diff from osquery_info oi join processes p using (pid) limit 1) order by cpu_per_second desc limit 10;",
            "interval": 300,
            "snapshot": true,
            "version": "2.1.1"
        },
        "windows_defender_disabled": {
            "query": "select key, data, mtime from registry where key='HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender';",
            "interval": 300
        },
        "windows_defender_versions": {
            "query": "select path, name, data from registry where key = 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows Defender\Signature Updates' and name like '%Version';",
            "interval": 10800
        },
        "windows_event_logs": {
            "query": "select datetime, time, source, provider_name, eventid, task, level, data from windows_events;",
            "interval": 120,
            "removed": false
        },
        "powershell_event_logs": {
            "query": "select datetime, time, source, provider_name, eventid, task, level, data from windows_events;",
            "interval": 120,
            "removed": false
        },
        "programs": {
            "query": "select name, version, install_location, publisher, installdate from programs;",
            "interval": 3600
        },
        "windows_patches": {
            "query": "select csname as hostname, hotfix_id, caption as url, description, fix_comments, installed_by, installed_on from patches;",
            "interval": 10800
        },
        "python_packages": {
            "query": "select name, version, author, path from python_packages;",
            "snapshot": false,
            "interval": 10800,
            "version": "2.8.0"
        },
        "secure_boot_config": {
            "query": "select path, name, type, data from registry where key like 'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecureBoot\%';",
            "interval": 10800
        },
        "windows_crashes": {
            "query": "select type, path, crash_path, wc.version, wc.pid, datetime, username, wc.tid, stack_trace, exception_code, exception_message, registers, command_line, current_directory, si.hardware_model, ov.version os_version, i.version AS _v FROM osquery_info i, system_info si, os_version ov, windows_crashes as wc;",
            "interval": 7200,
            "version": "2.11.2"
        }
    }
}